generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id           String   @id @default(cuid())
  name         String   
  email        String   @unique @db.Text
  passwordHash String?  // Nullable until user sets password
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  lastActive   DateTime?

  apiKey       String?   
  billingRate  Float     @default(0.5) 
  currentSpend Float     @default(0.0)

  minutesUsed  Int       @default(0) 
  callsMade    Int       @default(0) 

  role   UserRole   @default(standard)
  status UserStatus @default(pending)

  PasswordResetSessions PasswordResetSession[]
  Sessions              Session[]
  Jobs                  Job[] 

  @@map("users")
}




model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Job {
  id              String   @id @default(cuid())
  workOrderNumber String   @unique
  type            String
  size            String
  numberOfPallets Int
  lineNumber      String
  scheduledDate   DateTime
  status          String
  progress        Int
  instructions    String[]

  userId String?  // Optional, if jobs are tied to users
  user   User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model PasswordResetSession {
  id        String   @id @default(uuid())
  userId    String
  email     String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_session")
}

enum UserRole {
  admin
  standard
}

enum UserStatus {
  active
  pending
  suspended
}
